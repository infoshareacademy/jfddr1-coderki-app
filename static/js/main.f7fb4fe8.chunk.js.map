{"version":3,"sources":["components/Auth.module.css","components/Auth.js","components/Menu.js","views/HomePage.js","views/CalendarPage.js","views/TasksPage.js","views/SettingsPage.js","AppRouter.js","App.js","serviceWorker.js","index.js","components/Menu.module.css"],"names":["module","exports","Header","Footer","Auth","className","styles","container","authForm","type","name","href","target","Menu","to","activeClassName","activeLink","HomePage","CalendarPage","TasksPage","SettingsPage","AppRouter","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,SAAW,yB,uMCE3DC,EAAS,WACb,OACE,6BACE,8CAKAC,EAAS,WACb,OACE,6BACE,uDA+BSC,EA1BF,WACX,OACE,yBAAKC,UAAWC,IAAOC,WACrB,kBAAC,EAAD,MACA,0BAAMF,UAAWC,IAAOE,UACtB,wCACA,2BAAOC,KAAK,QAAQC,KAAK,UACzB,2CACA,2BAAOD,KAAK,WAAWC,KAAK,aAC5B,mDACA,2BAAOD,KAAK,WAAWC,KAAK,aAC5B,0CAEF,6BACE,yDAEE,uBAAGC,KAAK,IAAIC,OAAO,UAAnB,cAKJ,kBAAC,EAAD,Q,gBCjBSC,EAnBF,WACX,OACE,6BACE,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBT,IAAOU,YAA5C,QAGA,kBAAC,IAAD,CAASF,GAAG,YAAYC,gBAAiBT,IAAOU,YAAhD,YAGA,kBAAC,IAAD,CAASF,GAAG,SAASC,gBAAiBT,IAAOU,YAA7C,SAGA,kBAAC,IAAD,CAASF,GAAG,YAAYC,gBAAiBT,IAAOU,YAAhD,cCZSC,EAFE,kBAAM,mDCERC,EAFM,kBAAM,mDCEZC,EAFG,kBAAM,+CCETC,EAFM,kBAAM,uDC2CZC,EAnCG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMP,GAAG,KACP,qCAEF,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,KAAK,SACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,MACA,kBAAC,EAAD,WCtBGC,MAVf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5B3C,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,4B","file":"static/js/main.f7fb4fe8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__2H8ym\",\"authForm\":\"Auth_authForm__3U8S8\"};","import React from 'react';\nimport styles from './Auth.module.css';\n\nconst Header = () => {\n  return (\n    <div>\n      <h2>Home Manager</h2>\n    </div>\n  );\n};\n\nconst Footer = () => {\n  return (\n    <div>\n      <h2>This will be a footer</h2>\n    </div>\n  );\n};\n\nconst Auth = () => {\n  return (\n    <div className={styles.container}>\n      <Header />\n      <form className={styles.authForm}>\n        <label>Email</label>\n        <input type=\"email\" name=\"email\" />\n        <label>Password</label>\n        <input type=\"password\" name=\"password\" />\n        <label>Confirm password</label>\n        <input type=\"password\" name=\"password\" />\n        <button>Login</button>\n      </form>\n      <div>\n        <p>\n          You do not have an account?\n          <a href=\"#\" target=\"_blank\">\n            Register\n          </a>\n        </p>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './Menu.module.css';\n\nconst Menu = () => {\n  return (\n    <nav>\n      <NavLink to=\"/home\" activeClassName={styles.activeLink}>\n        Home\n      </NavLink>\n      <NavLink to=\"/calendar\" activeClassName={styles.activeLink}>\n        Calendar\n      </NavLink>\n      <NavLink to=\"/tasks\" activeClassName={styles.activeLink}>\n        Tasks\n      </NavLink>\n      <NavLink to=\"/settings\" activeClassName={styles.activeLink}>\n        Settings\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst HomePage = () => <div>To jest Home Page</div>;\n\nexport default HomePage;\n","import React from 'react';\n\nconst CalendarPage = () => <div>To jest Kalendarz</div>;\n\nexport default CalendarPage;\n","import React from 'react';\n\nconst TasksPage = () => <div>To jest Taski</div>;\n\nexport default TasksPage;\n","import React from 'react';\n\nconst SettingsPage = () => <div>To sÄ… Ustawienia</div>;\n\nexport default SettingsPage;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n// import styles from './AppWithRouting.module.css';\nimport Auth from './components/Auth';\nimport Menu from './components/Menu';\nimport HomePage from './views/HomePage';\nimport CalendarPage from './views/CalendarPage';\nimport TasksPage from './views/TasksPage';\nimport SettingsPage from './views/SettingsPage';\n\nconst AppRouter = () => {\n  return (\n    <BrowserRouter>\n      <Link to=\"/\">\n        <h1>Logo</h1>\n      </Link>\n      <div>\n        <Auth />\n        <Switch>\n          <Route path=\"/home\">\n            <Menu />\n            <HomePage />\n          </Route>\n          <Route path=\"/calendar\">\n            <Menu />\n            <CalendarPage />\n          </Route>\n          <Route path=\"/tasks\">\n            <Menu />\n            <TasksPage />\n          </Route>\n          <Route path=\"/settings\">\n            <Menu />\n            <SettingsPage />\n          </Route>\n          <Route path=\"/\">\n            <Menu />\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import React from 'react';\nimport './App.css';\n// import Auth from './views/Auth';\nimport AppRouter from './AppRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppRouter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__22vzR\",\"activeLink\":\"Menu_activeLink__3pbZ_\"};"],"sourceRoot":""}